
# ➕➖ Python Program: Checking for Positive, Negative, or Zero

This guide explains how to write a Python program to check if a given number is positive, negative, or exactly zero.

-----

## 💡 Core Concepts to Know

Here are the most important concepts to understand for this task.

  * **The `if-elif-else` Ladder**: This is the key concept for handling more than two outcomes. Python checks the conditions in order:

    1.  It checks the `if` condition first. If it's true, it runs that block and skips the rest.
    2.  If the `if` is false, it checks the `elif` (short for "else if") condition. If it's true, it runs that block.
    3.  If all preceding conditions are false, the final `else` block runs as a catch-all.

  * **Comparison Operators**: The logic relies on simple mathematical comparisons:

      * `>` (greater than): Used to check for a positive number (`number > 0`).
      * `<` (less than): Used to check for a negative number (`number < 0`).

  * **Input Conversion (`float`)**: Since a number can be a decimal (like `-12.5`), using `float()` to convert the user's input is more flexible than `int()`.

  * **Error Handling (`try-except`)**: Wrapping the user input and conversion in a `try-except` block is essential to prevent the program from crashing if the user enters non-numeric text.

-----

## 📝 The Step-by-Step Approach

This explains the decision-making logic of the user-input version.

1.  **Get the Ingredient (Input):** The program needs one number to check. It uses `input()` to get this value from the user as a string.

2.  **Prepare the Ingredient (Conversion):** The input string is converted to a `float` number so that mathematical comparisons can be performed. This is done safely inside a `try-except` block.

3.  **Make a Decision (The Conditional Ladder):** This is the core of the program. It asks a series of mutually exclusive questions in a specific order:

      * **Question 1 (`if`):** Is `number > 0`? If the answer is **yes**, the program declares the number "Positive" and the process stops.
      * **Question 2 (`elif`):** If the first answer was **no**, it then asks, "Is `number < 0`?" If the answer is **yes**, the program declares the number "Negative."
      * **Final Case (`else`):** If the number is not greater than 0 and it is not less than 0, the only remaining possibility is that it's zero. The `else` block catches this final case.

4.  **Announce the Result (Output):** Based on the decision made, the program prints the correct classification to the user.

-----

## 💻 The Final Code: Two Methods

Here are two methods to write the program in Python.

### **Method 1: Using a Pre-defined Number**

This version is simple and useful for a quick test.

```python
# A pre-defined number
number = -50

# Check if the number is greater than 0
if number > 0:
    print(f"The number {number} is Positive.")
# If not, then check if it's less than 0
elif number < 0:
    print(f"The number {number} is Negative.")
# If it's neither, it must be zero.
else:
    print("The number is Zero.")
```

  * **Output:**
    ```
    The number -50 is Negative.
    ```

### **Method 2: Taking a Number from the User**

This version is interactive and safely handles user input.

```python
try:
    # Get a number from the user and convert it to a float
    number = float(input("Enter any number: "))

    # Use an if-elif-else ladder to check the number's sign
    if number > 0:
        print(f"The number {number} is Positive.")
    elif number < 0:
        print(f"The number {number} is Negative.")
    else:
        print("The number is Zero.")

except ValueError:
    # This message prints if the input is not a valid number
    print("Error: Invalid input. Please enter a valid number.")
```

  * **Example Run:**
    ```
    Enter any number: 123.45
    The number 123.45 is Positive.
    ```
